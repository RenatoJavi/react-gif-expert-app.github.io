{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFechGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","evento","preventDefault","console","log","trim","length","cats","warn","type","value","onChange","e","target","prototype","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFechGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oNAIaA,EAAe,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAI9B,EAAoCC,mBAAS,wBAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAoBI,OACO,sBAAMC,SAfE,SAACC,GAChBA,EAAOC,iBACPC,QAAQC,IAAI,gBACRN,EAAWO,OAAOC,OAAO,GAEzBV,GAAc,SAAAW,GAAI,OAAGT,GAAH,mBAAiBS,OACnCR,EAAc,KAEdI,QAAQK,KAAK,SAOV,SACA,uBACCC,KAAK,OACLC,MAAOZ,EACRa,SAxBc,SAACC,GAE1Bb,EAAca,EAAEC,OAAOH,aA+BvBf,EAAYmB,UAAU,CACtBlB,cAAcmB,IAAUC,KAAKC,Y,mCC3ChBC,EAAO,uCAAC,WAAMC,GAAN,uBAAAC,EAAA,6DAEXC,EAFW,iDAEmCC,UAAUH,GAF7C,+DAGCI,MAAMF,GAHP,cAGXG,EAHW,gBAIEA,EAAKC,OAJP,uBAIVC,EAJU,EAIVA,KAEDC,EAAKD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACtB,MAAM,CACFC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QAVvB,kBAedM,GAfc,4CAAD,sDCEPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAGlC,OACI,sBAAKc,UAAU,4DAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAKA,QCFJO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SACvB,ECJyB,SAACA,GAExB,MAA0BtB,mBAAS,CAC3B6B,KAAK,GACLa,SAAQ,IAFhB,mBAAOC,EAAP,KAAcC,EAAd,KAsBA,OAjBDC,qBAAU,WAELxB,EAAQC,GACHwB,MAAK,SAAAd,GAGFY,EAAS,CAELf,KAAKG,EACLU,SAAQ,SAIvB,CAACpB,IAIKqB,EDpBqBI,CAAYzB,GAA9Ba,EAAZ,EAAON,KAAYa,EAAnB,EAAmBA,QA4BjB,OACG,cADK,CACL,sBACC,6BAAKpB,IACJoB,GAAW,4CACP,qBAAKJ,UAAU,YAAf,SAGGH,EAAOJ,KAAI,SAAAC,GAAG,OAEV,cAAC,EAAD,eAEKA,GADIA,EAAIC,aEvCpBe,EAAe,WAI3B,MAAoChD,mBAAS,CAAC,cAA9C,mBAAOiD,EAAP,KAAmBlD,EAAnB,KAUG,OACC,qCACI,8CACA,cAAC,EAAD,CAAcA,cAAeA,IAC7B,uBAEA,6BACIkD,EAAWlB,KAAI,SAAAT,GAEb,OAAO,cAAC,EAAD,CAENA,SAAUA,GADLA,Y,MCvBrB4B,IAASC,OAKP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f41d7f96.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory  = ({setCategories}) => {\r\n\r\n\r\n\r\nconst [inputValue, setInputValue] = useState(\"Hola soy programador\");\r\nconst handletInputChange=(e)=>{\r\n    \r\nsetInputValue(e.target.value);\r\n\r\n};\r\nconst handleSubmit=(evento)=>{\r\n    evento.preventDefault();//=>para prevenir el comportamineto por defecto del formulario\r\n    console.log('submit hecho');\r\n    if (inputValue.trim().length>2) {\r\n\r\n        setCategories(cats=>[inputValue,...cats]);\r\n        setInputValue('');\r\n    } else {\r\n        console.warn('eror');\r\n    }\r\n   \r\n    \r\n}\r\n\r\n    return (       \r\n           <form onSubmit={handleSubmit}>\r\n           <input \r\n            type=\"text\" \r\n            value={inputValue}\r\n           onChange={handletInputChange}          \r\n            \r\n            ></input>\r\n           </form>\r\n         \r\n       \r\n    )\r\n}\r\n\r\nAddCategory.prototype={\r\nsetCategories:PropTypes.func.isRequired\r\n\r\n}","export const getGifs=async(category)=>{//la amndamos como argumento\r\n\r\n    const url=`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=k3yngY6Tvh8ivUgBnE8H4cPWpsn6xLV7`;\r\n    const resp=await  fetch(url);\r\n    const {data}=await resp.json();\r\n\r\n    const gifs=data.map(img=>{\r\n       return{\r\n           id:img.id,\r\n           title:img.title,\r\n           url:img.images?.downsized_medium.url\r\n         \r\n       }\r\n    });\r\n    //console.log(gifs);\r\nreturn gifs;\r\n    //setImagenes\r\n\r\n    \r\n   };","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n\r\n   //console.log({id,title,url});\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce animate__delay-2s \">             \r\n            <img src={url} alt={title}/>\r\n            <p >{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","\r\nimport React from 'react'\r\nimport { useFechGifs } from '../hooks/useFechGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n  const {data:images,loading}=  useFechGifs(category);\r\n\r\n \r\n//const [contador, setcontador] = useState(0);\r\n// useEffect(()=>{\r\n//     getGifs(category)\r\n//     .then(imgs=>{setImages(imgs)});\r\n// },[category]);\r\n\r\n    // const getGifs=async()=>{\r\n\r\n    //  const url=`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=k3yngY6Tvh8ivUgBnE8H4cPWpsn6xLV7`;\r\n    //  const resp=await  fetch(url);\r\n    //  const {data}=await resp.json();\r\n\r\n    //  const gifs=data.map(img=>{\r\n    //     return{\r\n    //         id:img.id,\r\n    //         title:img.title,\r\n    //         url:img.images?.downsized_medium.url          \r\n    //     }\r\n    //  });\r\n    //  console.log(gifs);\r\n    //  setImages(gifs);\r\n\r\n    //  //setImagenes\r\n    // };\r\n    //getGifs();\r\n    return (//aqui estoy regresando 2 objetos. por eso uso el fracment\r\n       <>\r\n        <h3>{category}</h3>\r\n        {loading && <p>Loading ...</p>}\r\n             <div className=\"card-grid\">\r\n                        \r\n               {\r\n                images.map(img=>(\r\n                    \r\n                    <GifGridItem \r\n                        key={img.id}\r\n                    { ...img}/>\r\n                ))\r\n               }\r\n                     \r\n        </div>\r\n         {/*<h3>{contador}</h3>\r\n             <button onClick={()=>{setcontador(contador+1)}}>Add</button> */}\r\n        </>\r\n    )\r\n}\r\n","import  { useEffect, useState } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFechGifs = (category) => {\r\n   \r\n    const [state, setstate] = useState({\r\n            data:[],\r\n            loading:true,\r\n    });\r\n\r\n   useEffect(()=>{//cuerpo de mi peticion http//aquinecesito mis imagenes\r\n\r\n        getGifs(category)\r\n            .then(img=>{\r\n\r\n\r\n                setstate({\r\n\r\n                    data:img,\r\n                    loading:false,\r\n         } );\r\n                })\r\n        \r\n   },[category]);\r\n\r\n\r\n\r\n    return state;\r\n}\r\n\r\n// es la {data:[],loading:true };","\r\n\r\nimport React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    \r\n    \r\n const [categories, setCategories] = useState(['One Punch']);\r\n\r\n// const handleAdd=()=>{\r\n//     //setCategories(['hunter',...categories,]);//1 opcion\r\n//     setCategories(cat=>[...categories,'bugetCar']);\r\n//     console.log(categories);\r\n// };\r\n\r\n\r\n    \r\n    return (\r\n     <>\r\n         <h2>GifExpertApp</h2>\r\n         <AddCategory  setCategories={setCategories} />\r\n         <hr/>\r\n         {/* <button onClick={handleAdd}> Agregar</button> */}\r\n         <ol>\r\n            {categories.map(category=>{\r\n                // return <li key={category} >{category}</li>\r\n               return <GifGrid\r\n                key={category}\r\n                category={category}/>\r\n              \r\n\r\n\r\n            })}\r\n         </ol>\r\n     </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n//import App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>,\n  //<App/>,\n  <GifExpertApp></GifExpertApp>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}